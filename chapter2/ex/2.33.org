* Question:
Exercise 2.33: Using the variable definitions from this section, determine
what happens in each of these assignments:
#+begin_src cpp
  a = 42;  b = 42;  c = 42;
  d = 42;  e = 42;  g = 42;
#+end_src

* Answer:
Note(some code from the section):
#+begin_src cpp
  int i = 0, &r = i;
  auto a = r;  // a is an int (r is an alias for i, which has type int)

  const int ci = i, &cr = ci;
  auto b = ci;  // b is an int (top-level const in ci is dropped)
  auto c = cr;  // c is an int (cr is an alias for ci whose const is top-level)
  auto d = &i;  // d is an int*(& of an int object is int*)
  auto e = &ci; // e is const int*(& of a const object is low-level const)

  auto &g = ci;       // g is a const int& that is bound to ci
#+end_src


solution:
#+begin_src cpp
  a = 42;                         // assign 42 to a;
  b = 42;                         // assign 42 to b;
  c = 42;                         // assign 42 to c;
  d = 42;                         // error: d is a pointer, can't assign literal(except to zero) to a pointer. correct: *d = 42;
  e = 42;                         // error:  can't assign a literal(except zero) to a pointer
  g = 42;                         // error: g is a const reference
#+end_src
